diff --git a/src/dawn/common/CMakeLists.txt b/src/dawn/common/CMakeLists.txt
index 9c3e4a225b..f2861a47b5 100644
--- a/src/dawn/common/CMakeLists.txt
+++ b/src/dawn/common/CMakeLists.txt
@@ -179,6 +179,7 @@ dawn_add_library(
         webgpu_c
         webgpu_cpp
     PRIVATE_DEPENDS
+        absl::flat_hash_set
         absl::inlined_vector
         absl::no_destructor
         absl::overload
diff --git a/src/dawn/native/CMakeLists.txt b/src/dawn/native/CMakeLists.txt
index 820b1b0dfa..d61eca0a56 100644
--- a/src/dawn/native/CMakeLists.txt
+++ b/src/dawn/native/CMakeLists.txt
@@ -198,6 +198,7 @@ set(sources
     "ComputePipeline.cpp"
     "CopyTextureForBrowserHelper.cpp"
     "CreatePipelineAsyncEvent.cpp"
+    "DawnNative.cpp"
     "Device.cpp"
     "DeviceGuard.cpp"
     "DynamicUploader.cpp"
@@ -340,6 +341,7 @@ if (DAWN_ENABLE_D3D11 OR DAWN_ENABLE_D3D12)
         "d3d/BackendD3D.cpp"
         "d3d/BlobD3D.cpp"
         "d3d/D3DError.cpp"
+        "d3d/D3DBackend.cpp"
         "d3d/DeviceD3D.cpp"
         "d3d/KeyedMutex.cpp"
         "d3d/PhysicalDeviceD3D.cpp"
@@ -393,6 +395,7 @@ if (DAWN_ENABLE_D3D11)
         "d3d11/CommandBufferD3D11.cpp"
         "d3d11/CommandRecordingContextD3D11.cpp"
         "d3d11/ComputePipelineD3D11.cpp"
+        "d3d11/D3D11Backend.cpp"
         "d3d11/DeviceD3D11.cpp"
         "d3d11/DeviceInfoD3D11.cpp"
         "d3d11/PhysicalDeviceD3D11.cpp"
@@ -465,6 +468,7 @@ if (DAWN_ENABLE_D3D12)
         "d3d12/CommandRecordingContext.cpp"
         "d3d12/ComputePipelineD3D12.cpp"
         "d3d12/CPUDescriptorHeapAllocationD3D12.cpp"
+        "d3d12/D3D12Backend.cpp"
         "d3d12/D3D12Info.cpp"
         "d3d12/DeviceD3D12.cpp"
         "d3d12/GPUDescriptorHeapAllocationD3D12.cpp"
@@ -535,6 +539,7 @@ if (DAWN_ENABLE_METAL)
         "metal/CommandRecordingContext.mm"
         "metal/ComputePipelineMTL.mm"
         "metal/DeviceMTL.mm"
+        "metal/MetalBackend.mm"
         "metal/PhysicalDeviceMTL.mm"
         "metal/PipelineLayoutMTL.mm"
         "metal/QuerySetMTL.mm"
@@ -572,6 +577,7 @@ if (DAWN_ENABLE_NULL)
     )
     list(APPEND sources
         "null/DeviceNull.cpp"
+        "null/NullBackend.cpp"
     )
 endif()
 
@@ -596,6 +602,7 @@ if (DAWN_ENABLE_WEBGPU_ON_WEBGPU)
         "webgpu/DeviceWGPU.cpp"
         "webgpu/PhysicalDeviceWGPU.cpp"
         "webgpu/QueueWGPU.cpp"
+        "webgpu/WebGPUBackend.cpp"
     )
 endif()
 
@@ -675,6 +682,7 @@ if (DAWN_ENABLE_OPENGL)
         "opengl/DisplayEGL.cpp"
         "opengl/EGLFunctions.cpp"
         "opengl/GLFormat.cpp"
+        "opengl/OpenGLBackend.cpp"
         "opengl/OpenGLFunctions.cpp"
         "opengl/OpenGLVersion.cpp"
         "opengl/PersistentPipelineStateGL.cpp"
@@ -779,6 +787,7 @@ if (DAWN_ENABLE_VULKAN)
         "vulkan/SwapChainVk.cpp"
         "vulkan/TextureVk.cpp"
         "vulkan/UtilsVulkan.cpp"
+        "vulkan/VulkanBackend.cpp"
         "vulkan/VulkanError.cpp"
         "vulkan/VulkanExtensions.cpp"
         "vulkan/VulkanFunctions.cpp"
@@ -817,33 +826,6 @@ if (DAWN_ENABLE_VULKAN)
     endif()
 endif()
 
-set(dawn_component_srcs)
-list(APPEND dawn_component_srcs "DawnNative.cpp")
-if (DAWN_ENABLE_D3D11 OR DAWN_ENABLE_D3D12)
-    list(APPEND dawn_component_srcs "d3d/D3DBackend.cpp")
-endif()
-if (DAWN_ENABLE_D3D11)
-    list(APPEND dawn_component_srcs "d3d11/D3D11Backend.cpp")
-endif()
-if (DAWN_ENABLE_D3D12)
-    list(APPEND dawn_component_srcs "d3d12/D3D12Backend.cpp")
-endif()
-if (DAWN_ENABLE_METAL)
-    list(APPEND dawn_component_srcs "metal/MetalBackend.mm")
-endif()
-if (DAWN_ENABLE_NULL)
-    list(APPEND dawn_component_srcs "null/NullBackend.cpp")
-endif()
-if (DAWN_ENABLE_WEBGPU_ON_WEBGPU)
-    list(APPEND dawn_component_srcs "webgpu/WebGPUBackend.cpp")
-endif()
-if (DAWN_ENABLE_OPENGL)
-    list(APPEND dawn_component_srcs "opengl/OpenGLBackend.cpp")
-endif()
-if (DAWN_ENABLE_VULKAN)
-    list(APPEND dawn_component_srcs "vulkan/VulkanBackend.cpp")
-endif()
-
 set(dawn_native_public_depends
     dawn::dawn_common
     dawn::dawn_platform
@@ -861,13 +843,9 @@ set(dawn_native_private_depends
     ${conditional_private_depends}
 )
 
-# The same object files are reused to build
-# 1. dawn_native (which gets used by tests, samples, benchmarks)
-# 2. webgpu_dawn bundle (which gets installed via CMake install rules)
 dawn_add_library(
-  dawn_native_objects
+  dawn_native
   UTILITY_TARGET dawn_internal_config
-  FORCE_OBJECT
   HEADERS
     ${headers}
   PRIVATE_HEADERS
@@ -881,19 +859,6 @@ dawn_add_library(
     ${conditional_private_platform_depends}
 )
 
-dawn_add_library(
-  dawn_native
-  UTILITY_TARGET dawn_internal_config
-  SOURCES
-    ${dawn_component_srcs}
-  DEPENDS
-    dawn::dawn_native_objects
-    ${dawn_native_public_depends}
-  PRIVATE_DEPENDS
-    ${dawn_native_private_depends}
-    ${conditional_private_platform_depends}
-)
-
 target_compile_definitions(dawn_native PRIVATE "DAWN_NATIVE_IMPLEMENTATION")
 if(BUILD_SHARED_LIBS)
     target_compile_definitions(dawn_native PUBLIC "DAWN_NATIVE_SHARED_LIBRARY")
@@ -906,23 +871,19 @@ endif()
 if (DAWN_ENABLE_D3D12)
     if (DAWN_USE_BUILT_DXC)
         target_compile_definitions(dawn_native PRIVATE "DAWN_USE_BUILT_DXC")
-        target_compile_definitions(dawn_native_objects PRIVATE "DAWN_USE_BUILT_DXC")
         add_dependencies(dawn_native copy_dxil_dll)
     endif()
 endif()
 
 if ((DAWN_ENABLE_OPENGL OR DAWN_ENABLE_VULKAN) AND DAWN_ENABLE_SPIRV_VALIDATION)
     target_compile_definitions(dawn_native PRIVATE "DAWN_ENABLE_SPIRV_VALIDATION")
-    target_compile_definitions(dawn_native_objects PRIVATE "DAWN_ENABLE_SPIRV_VALIDATION")
 endif()
 
 if (DAWN_ENABLE_SWIFTSHADER)
     target_compile_definitions(dawn_native PRIVATE "DAWN_ENABLE_SWIFTSHADER")
-    target_compile_definitions(dawn_native_objects PRIVATE "DAWN_ENABLE_SWIFTSHADER")
 endif()
 
 if (IOS)
-    target_compile_options(dawn_native_objects PRIVATE -fno-objc-arc)
     target_compile_options(dawn_native PRIVATE -fno-objc-arc)
 endif()
 
@@ -941,39 +902,31 @@ if (DAWN_BUILD_MONOLITHIC_LIBRARY)
     )
     # Bundle all objects of dawn_native, it's public dependencies and private dependencies.
     include(BundleLibraries)
-    bundle_libraries(webgpu_dawn dawn::dawn_native_objects)
+    bundle_libraries(webgpu_dawn dawn_native)
 
     add_library(dawn::webgpu_dawn ALIAS webgpu_dawn)
     # Compile backend specific sources along with webgpu_dawn_native_proc sources for export macros to get applied.
     target_sources(webgpu_dawn
         PRIVATE
         ${WEBGPU_DAWN_NATIVE_PROC_GEN_SOURCES}
-        ${dawn_component_srcs}
     )
+
     target_compile_definitions(webgpu_dawn
         PRIVATE
             "WGPU_IMPLEMENTATION"
-            "DAWN_NATIVE_IMPLEMENTATION"
     )
     if (BUILD_SHARED_LIBS)
         target_compile_definitions(webgpu_dawn
             PUBLIC
                 "$<$<BOOL:BUILD_SHARED_LIBS>:WGPU_SHARED_LIBRARY>"
-                "$<$<BOOL:BUILD_SHARED_LIBS>:DAWN_NATIVE_SHARED_LIBRARY>"
         )
     endif()
-    # Apart from dawn_public_config, everything else goes inside PRIVATE, otherwise install rules will complain that they were not exported.
-    target_link_libraries(webgpu_dawn
-        PUBLIC
-            dawn_public_config
-        PRIVATE
-            dawn_internal_config
-            ${dawn_native_public_depends}
-            ${dawn_native_private_depends}
-            ${conditional_private_platform_depends}
-    )
+
+    # Since this is a bundled library, the only dependency is the config needed to use it.
+    target_link_libraries(webgpu_dawn PUBLIC dawn_public_config)
+
     set(webgpu_dawn_public_headers)
-    foreach(dawn_target_name IN ITEMS dawn_headers dawncpp_headers dawn_native_objects)
+    foreach(dawn_target_name IN ITEMS dawn_headers dawncpp_headers dawn_native)
         get_target_property(headers "${dawn_target_name}" INTERFACE_SOURCES)
         list(INSERT webgpu_dawn_public_headers 0 "${headers}")
     endforeach()
