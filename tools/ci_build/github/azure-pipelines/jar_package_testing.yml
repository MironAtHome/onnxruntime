resources:
  pipelines:
  - pipeline: build
    source: 'Zip-Nuget-Java-Nodejs Packaging Pipeline'
    trigger: true
    branch: main

variables:
  mavenVersion: '3.9.8'
  
stages:
- template: templates/final-jar-testing.yml
  parameters:
    OS: Windows
    PoolName: 'onnxruntime-Win-CPU-2022'

- template: templates/final-jar-testing.yml
  parameters:
    OS: Linux
    PoolName: 'onnxruntime-Ubuntu2204-AMD-CPU'

- template: templates/final-jar-testing.yml
  parameters:
    OS: MacOS
    PoolName: 'macOS-14'

- stage: GPU_JAR_Testing
  jobs:
  - job: Final_Jar_Testing_Windows_GPU
    workspace:
      clean: all
    pool: 'onnxruntime-Win2022-GPU-A10'
    timeoutInMinutes: 60
    variables:
    - name: runCodesignValidationInjection
      value: false

    steps:
    - template: templates/set-version-number-variables-step.yml

    - template: templates/jobs/download_win_gpu_library.yml
      parameters:
        CudaVersion: 12.2
        DownloadCUDA: true
        DownloadTRT: true

    - pwsh: |
        echo "Downloading and installing Maven $(mavenVersion) for Windows..."
        $MAVEN_DIR = "$(Agent.TempDirectory)\apache-maven-$(mavenVersion)"
        # Download Maven binary
        Invoke-WebRequest -Uri "https://archive.apache.org/dist/maven/maven-3/$(mavenVersion)/binaries/apache-maven-$(mavenVersion)-bin.zip" -OutFile "$(Agent.TempDirectory)\maven.zip"

        # Extract to the temp directory
        Expand-Archive -Path "$(Agent.TempDirectory)\maven.zip" -DestinationPath "$(Agent.TempDirectory)"

        # Add Maven's bin directory to the PATH for subsequent tasks in the job
        echo "##vso[task.prependpath]$MAVEN_DIR\bin"


    - script: |
        echo "Maven is now on the PATH."
        mvn --version

    - download: build
      artifact: 'onnxruntime-java-gpu'
      displayName: 'Download Final Jar'

    - task: Maven@4
      displayName: 'Download Dependencies into App Folder'
      inputs:
        mavenPomFile: '$(Build.SourcesDirectory)/tools/ci_build/java/pom.xml'
        goals: 'dependency:copy-dependencies'
        options: '-DoutputDirectory=$(Pipeline.Workspace)/build/onnxruntime-java-gpu'
        publishJUnitTestResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'

    - task: PowerShell@2
      displayName: 'Run Java Tests with PowerShell'
      inputs:
        targetType: 'inline'
        script: |
          # Exit script on any error
          $ErrorActionPreference = "Stop"

          # Find the JUnit Standalone Runner JAR using Get-ChildItem
          $junitRunnerJar = Get-ChildItem -Path $(Pipeline.Workspace)/build/onnxruntime-java-gpu -Filter "junit-platform-console-standalone-*.jar" -Recurse | Select-Object -First 1

          # Check if the JAR file was found and fail the task if not
          if ($null -eq $junitRunnerJar) {
            Write-Host "##vso[task.logissue type=error]JUnit Platform Console Standalone JAR not found in $(Pipeline.Workspace)/build/onnxruntime-java-gpu!"
            exit 1
          }

          Write-Host "Found JUnit Runner: $($junitRunnerJar.FullName)"
          dir "$(Pipeline.Workspace)/build/onnxruntime-java-gpu"
          Write-Host "Running JUnit Tests..."

          & java -jar "$($junitRunnerJar.FullName)" --scan-classpath "$(Pipeline.Workspace)/build/onnxruntime-java-gpu" --reports-dir "$($env:Build_ArtifactStagingDirectory)/TestResults"

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/TestResults/TEST-junit-jupiter.xml'
        failTaskOnFailedTests: true


  - job: Final_Jar_Testing_Linux_GPU
    workspace:
      clean: all
    pool:
      name: 'Onnxruntime-Linux-GPU-A10'
    variables:
    - name: runCodesignValidationInjection
      value: false
    - name: docker_base_image
      value: onnxruntimebuildcache.azurecr.io/internal/azureml/onnxruntime/build/cuda12_x64_almalinux8_gcc12:20250724.1
    timeoutInMinutes: 60
    steps:
    - checkout: self
      submodules: false

    - template: templates/set-version-number-variables-step.yml

    - download: build
      artifact: 'onnxruntime-java-gpu'
      displayName: 'Download Final Jar'

    - script: |
        mv $(Pipeline.Workspace)/build/onnxruntime-java-gpu $(Build.BinariesDirectory)/final-jar

    - template: templates/get-docker-image-steps.yml
      parameters:
        Dockerfile: tools/ci_build/github/linux/docker/Dockerfile.package_ubi8_cuda_tensorrt10_0
        Context: tools/ci_build/github/linux/docker/
        DockerBuildArgs: "--build-arg BUILD_UID=$( id -u ) --build-arg BASEIMAGE=${{ variables.docker_base_image }} --build-arg TRT_VERSION=${{ variables.linux_trt_version }}"
        Repository: onnxruntimeubi8packagestest

    - bash: |
        docker run -e SYSTEM_COLLECTIONURI --rm \
          --gpus all \
          --volume $(Build.SourcesDirectory):/onnxruntime_src \
          --volume $(Build.BinariesDirectory):/build \
          --volume /data/models:/build/models:ro \
          onnxruntimeubi8packagestest \
          /bin/bash /onnxruntime_src/tools/ci_build/github/linux/java_linux_final_test.sh -r /build -v $(OnnxRuntimeVersion)
      displayName: 'Test'