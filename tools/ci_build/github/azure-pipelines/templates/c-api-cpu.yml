parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true
- name: DoEsrp
  displayName: Run code sign tasks? Must be true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: IsReleaseBuild
  displayName: Is a release build? Set it to true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: AdditionalBuildFlags
  displayName: Additional build flags for build.py
  type: string
  default: ''

- name: AdditionalWinBuildFlags
  displayName: Additional build flags that just for Windows Builds
  type: string
  default: ''

- name: OrtNugetPackageId
  displayName: Package name for nuget
  type: string
  default: 'Microsoft.ML.OnnxRuntime'

- name: BuildVariant
  type: string
  default: 'default'

- name: SpecificArtifact
  displayName: Use Specific Artifact
  type: boolean
  default: false

- name: BuildId
  displayName: Specific Artifact's BuildId
  type: string
  default: '0'

# Do not update this to a version that does not exist for the qnn-runtime Maven package:
# https://mvnrepository.com/artifact/com.qualcomm.qti/qnn-runtime
- name: QnnSDKVersion
  displayName: QNN SDK Version
  type: string
  default: 2.35.0.250530

- name: is1ES
  displayName: Is 1ES pipeline
  type: boolean
  default: false

stages:

- stage: Run_NUnit_Appium_BrowserStack_Sample
  dependsOn: Setup # Setup stage defined in set_packaging_variables_stage.yml creates the ReleaseVersionSuffix variable
  jobs:
  - job: Run_NUnit_Appium_BrowserStack_Sample
    pool:
      name: 'onnxruntime-Win-CPU-2022'
      os: windows
    steps:
    - checkout: self
      persistCredentials: true

    - task: NuGetToolInstaller@0
      displayName: Use Nuget 6.10.x
      inputs:
        versionSpec: 6.10.x

    - task: PowerShell@2
      displayName: Install MAUI workloads
      inputs:
        targetType: 'inline'
        script: |
          dotnet workload install maui maui-android android
        workingDirectory: '$(Build.SourcesDirectory)\android'

    - task: PowerShell@2
      displayName: Install and Launch Appium Server
      inputs:
        targetType: 'inline'
        script: |
          npm install -g appium

          Start-Process -FilePath "appium" -ArgumentList "server", "--address", "127.0.0.1", "--port", "4723", "--use-drivers", "uiautomator2", "--base-path", "/wd/hub" -WindowStyle Hidden

          Start-Sleep -Seconds 10

          try {
            $response = Invoke-WebRequest -Uri "http://127.0.0.1:4723/wd/hub/status" -Method GET -TimeoutSec 30
            Write-Host "Appium server is running successfully"
            Write-Host "Response: $($response.Content)"
          } catch {
            Write-Error "Failed to connect to Appium server: $_"
            exit 1
          }

    - task: PowerShell@2
      displayName: Run BrowserStack test
      inputs:
        targetType: 'inline'
        script: |
          dotnet test
        workingDirectory: '$(Build.SourcesDirectory)\android'
      env:
        BROWSERSTACK_USERNAME: $(browserstack_username)
        BROWSERSTACK_ACCESS_KEY: $(browserstack_access_key)

    - task: 1ES.PublishPipelineArtifact@1
      displayName: 'Publish BrowserStack test results'
      inputs:
        targetPath: '$(Build.SourcesDirectory)\android\log'
        artifactName: 'BrowserStack local log'
        publishLocation: 'pipeline'
