parameters:
- name: OS
  displayName: Opserating System
  type: string

- name: PoolName
  type: string

stages:
- stage: Final_Jar_Testing_${{parameters.OS}}
  jobs:
  - job: Final_Jar_Testing_${{parameters.OS}}
    workspace:
      clean: all
    ${{ if eq(parameters.OS, 'MacOS') }}:
      pool:
        vmImage: 'macOS-15'
    ${{ if eq(parameters.OS, 'Linux') }}:
      pool:
        name: ${{ parameters.PoolName }}
    ${{ if eq(parameters.OS, 'Windows') }}:
      pool:
        name: ${{ parameters.PoolName }}
    variables:
    - name: runCodesignValidationInjection
      value: false
    timeoutInMinutes: 60
    steps:
    - template: set-version-number-variables-step.yml

    - bash: |
        echo "Downloading and installing Maven $(mavenVersion) for Linux..."
        MAVEN_DIR="$(Agent.TempDirectory)/apache-maven-$(mavenVersion)"
        # Download Maven binary
        wget https://archive.apache.org/dist/maven/maven-3/$(mavenVersion)/binaries/apache-maven-$(mavenVersion)-bin.tar.gz -O $(Agent.TempDirectory)/maven.tar.gz

        # Extract to the temp directory
        mkdir -p ${MAVEN_DIR}
        tar -xzf $(Agent.TempDirectory)/maven.tar.gz -C $(Agent.TempDirectory)

        # Add Maven's bin directory to the PATH for subsequent tasks in the job
        echo "##vso[task.prependpath]${MAVEN_DIR}/bin"
      displayName: 'Install Maven (Linux)'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    - pwsh: |
        echo "Downloading and installing Maven $(mavenVersion) for Windows..."
        $MAVEN_DIR = "$(Agent.TempDirectory)\apache-maven-$(mavenVersion)"
        # Download Maven binary
        Invoke-WebRequest -Uri "https://archive.apache.org/dist/maven/maven-3/$(mavenVersion)/binaries/apache-maven-$(mavenVersion)-bin.zip" -OutFile "$(Agent.TempDirectory)\maven.zip"

        # Extract to the temp directory
        Expand-Archive -Path "$(Agent.TempDirectory)\maven.zip" -DestinationPath "$(Agent.TempDirectory)"

        # Add Maven's bin directory to the PATH for subsequent tasks in the job
        echo "##vso[task.prependpath]$MAVEN_DIR\bin"
      displayName: 'Install Maven (Windows)'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))


    - script: |
        echo "Maven is now on the PATH."
        mvn --version

    - download: build
      artifact: 'onnxruntime-java'
      displayName: 'Download Final Jar'

    - task: Maven@4
      displayName: 'Download Dependencies into App Folder'
      inputs:
        mavenPomFile: '$(Build.SourcesDirectory)/tools/ci_build/java/pom.xml'
        goals: 'dependency:copy-dependencies'
        options: '-DoutputDirectory=$(Pipeline.Workspace)/build/onnxruntime-java'
        publishJUnitTestResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'

    - task: PowerShell@2
      displayName: 'Run Java Tests with PowerShell'
      inputs:
        targetType: 'inline'
        script: |
          # Exit script on any error
          $ErrorActionPreference = "Stop"

          # Set the dynamic library path based on the OS
          $libPath = '$(Build.BinariesDirectory)/final-jar/test'

          if ($IsLinux) {
              Write-Host "Setting LD_LIBRARY_PATH for Linux..."
              $env:LD_LIBRARY_PATH = "$libPath:${env:LD_LIBRARY_PATH}"
              Write-Host "LD_LIBRARY_PATH is now set for this script."
          }
          elseif ($IsMacOs) {
              Write-Host "Setting DYLD_LIBRARY_PATH for MacOS..."
              $env:DYLD_LIBRARY_PATH = "$libPath:${env:DYLD_LIBRARY_PATH}"
              Write-Host "DYLD_LIBRARY_PATH is now set for this script."
          }

          # Find the JUnit Standalone Runner JAR using Get-ChildItem
          $junitRunnerJar = Get-ChildItem -Path $(Pipeline.Workspace)/build/onnxruntime-java -Filter "junit-platform-console-standalone-*.jar" -Recurse | Select-Object -First 1

          # Check if the JAR file was found and fail the task if not
          if ($null -eq $junitRunnerJar) {
            Write-Host "##vso[task.logissue type=error]JUnit Platform Console Standalone JAR not found in $(Pipeline.Workspace)/build/onnxruntime-java!"
            exit 1
          }

          Write-Host "Found JUnit Runner: $($junitRunnerJar.FullName)"

          Write-Host "Running JUnit Tests..."

          # Execute the java command
          & java -jar "$($junitRunnerJar.FullName)" --scan-classpath "$(Pipeline.Workspace)/build/onnxruntime-java" --reports-dir "$($env:Build_ArtifactStagingDirectory)/TestResults"

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/TestResults/TEST-junit-jupiter.xml'
        failTaskOnFailedTests: true
