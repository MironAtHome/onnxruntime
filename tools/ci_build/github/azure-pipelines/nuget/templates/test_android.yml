parameters:
  AgentPool : 'Win-CPU'
  ArtifactSuffix: ''
  SpecificArtifact: false
  BuildId: ''

stages:
- stage: NuGet_Test_Android
  dependsOn:
  - Setup
  jobs:
  - job:  NuGet_Test_Android
    workspace:
      clean: all
    pool: "${{ parameters.AgentPool }}"

    variables:
    - name: OnnxRuntimeBuildDirectory
      value: '$(Build.BinariesDirectory)'

    steps:
      - task: NuGetToolInstaller@0
        displayName: Use Nuget 6.10.x
        inputs:
          versionSpec: 6.10.x

      - download: build
        displayName: 'Download Nuget'
        artifact: 'drop-signed-nuget-${{ parameters.ArtifactSuffix }}'

      - template: get-nuget-package-version-as-variable.yml
        parameters:
          packageFolder: '$(Pipeline.Workspace)/build/drop-signed-nuget-${{ parameters.ArtifactSuffix }}'

      - task: PowerShell@2
        displayName: Install MAUI workloads
        inputs:
          targetType: 'inline'
          script: |
            dotnet workload install maui maui-android android
          workingDirectory: '$(Build.SourcesDirectory)\csharp'

      - task: PowerShell@2
        displayName: Publish Android MAUI APK
        inputs:
          targetType: 'inline'
          script: |
            dotnet nuget add source $(Pipeline.Workspace)/build/drop-signed-nuget-${{ parameters.ArtifactSuffix }} --name local-nuget
            dotnet publish -c Release --property:UsePrebuiltNativePackage=true --property:CurrentOnnxRuntimeVersion=$(NuGetPackageVersionNumber) -f net8.0-android
          workingDirectory: '$(Build.SourcesDirectory)\csharp\test\Microsoft.ML.OnnxRuntime.Tests.MAUI'

      - task: BrowserStackConfig@0
        inputs:
          BrowserStackServiceEndPoint: 'OnnxRuntimeBrowserStackConnection'

      - task: BrowserStackAppUploader@0
        inputs:
          appPath: '$(Build.SourcesDirectory)\csharp\test\Microsoft.ML.OnnxRuntime.Tests.MAUI\bin\Release\net8.0-android\publish\ORT.CSharp.Tests.MAUI-Signed.apk'
          appCustomId: 'Appium-Android-CI'

      - task: PowerShell@2
        displayName: Run BrowserStack test
        continueOnError: true
        timeoutInMinutes: 5
        inputs:
          targetType: 'inline'
          script: |
            try {
              $job = Start-Job -ScriptBlock {
                Set-Location "$(Build.SourcesDirectory)\csharp\test\Microsoft.ML.OnnxRuntime.Tests.BrowserStack.Android"
                dotnet test
              }

              # Wait for job to complete or timeout (4.5 minutes to leave buffer for cleanup)
              $completed = Wait-Job -Job $job -Timeout 270

              if ($completed) {
                Receive-Job -Job $job
                if ($job.State -eq 'Completed') {
                  $exitCode = 0
                } else {
                  $exitCode = 1
                }
              } else {
                Write-Host "Test timed out, stopping job and cleaning up processes..."
                Stop-Job -Job $job
                Remove-Job -Job $job -Force -ErrorAction SilentlyContinue

                # Kill any remaining dotnet test processes
                Get-Process -Name "dotnet" -ErrorAction SilentlyContinue | Where-Object { $_.ProcessName -eq "dotnet" } | Stop-Process -Force -ErrorAction SilentlyContinue
                Get-Process -Name "testhost*" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
                Get-Process -Name "chromedriver*" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue

                # Wait a moment for file handles to be released
                Start-Sleep -Seconds 5
                $exitCode = 1
              }

              Remove-Job -Job $job -Force -ErrorAction SilentlyContinue
              exit $exitCode
            } catch {
              Write-Host "Error during test execution: $_"
              exit 1
            }
          workingDirectory: '$(Build.SourcesDirectory)\csharp\test\Microsoft.ML.OnnxRuntime.Tests.BrowserStack.Android'
        env:
          BROWSERSTACK_USERNAME: $(browserstack_username)
          BROWSERSTACK_ACCESS_KEY: $(browserstack_access_key)

      - task: PublishBuildArtifacts@1
        displayName: 'Publish BrowserStack test logs'
        condition: always()
        inputs:
          pathToPublish: '$(Build.SourcesDirectory)\csharp\test\Microsoft.ML.OnnxRuntime.Tests.BrowserStack.Android\log'
          artifactName: 'browserstack-test-logs-${{ parameters.ArtifactSuffix }}'
          publishLocation: 'Container'
